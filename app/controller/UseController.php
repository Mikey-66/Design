<?php
/**
 *  use 用法
 * Created by PhpStorm.
 * User: Jie Liu
 * Date: 2017/5/25
 * Time: 17:36
 */


/**
 *1】用于命名空间    （个人认为这种用法意义不大）
 *2】用于向匿名函数传递外层参数
 *
 */

namespace app\controller;

use app\lib\obj as animal;
use app\lib\sta\MysqlConnection;
use app\lib\sta\PdoConnection;
use app\lib\sta\Vip;
use app\lib\sta\Yvip;


class A

{
    public static function echoClass()
    {
        echo __CLASS__;
    }

    public static function test()
    {
//        self::echoClass();
        static::echoClass();
    }

    public static function test2()
    {
        static::echoClass();
    }
}

class B extends A
{
//    public static function echoClass()
//    {
//        //parent::echoClass(); // TODO: Change the autogenerated stub
//        echo __CLASS__;
//    }
}

class Father
{
    static $name = "liu bo";

    public function tellName()
    {
        echo self::$name . '<br/>';
        self::showClass();
    }

    static function showClass()
    {
        echo 'Father Class';
    }

}

class Boy extends Father
{
    static $name = "liu jie";

    static function showClass()
    {
        //parent::showClass(); // TODO: Change the autogenerated stub
        echo 'Son Class';
    }

}

class Mother
{
    static $name = "gong qiong xiu";

    static function showClass()
    {
        echo 'Mother Class';
    }

    public function tellName()
    {
        echo static::$name . '<br/>';
        static::showClass();

        $x = new static();      // 这种逻辑比较简单易掌握，上面两种需要多思考用法
        dd($x);
        dd(get_called_class());
    }
}

class Girl extends Mother
{
    static $name = "jane";

    static function showClass()
    {
        parent::showClass(); // TODO: Change the autogenerated stub
        echo 'Girl Class';
    }

}

class UseController extends BaseController
{
    public function actionT1(){
        $dog = new animal\Dog();
    }


    public function actionT2(){

        $a = '1';
        $b = '2';
        $func = function($name) use ($a, $b)
        {
            return $name . $a . $b;
        };

        dd($func);
        echo call_user_func($func, 'liujiep');
//        echo $func('liujie');


    }


    /**
     * 延迟静态绑定用法  （php5.3 加入功能）
     * 在父类中调用子类的最终形态
     * 1.用法 见下
     * 2.常见使用场景
     * 使用self还是static 关键看我们的需要
     * self 关键字的局限 导致了 static 的这种用法
     *
     *  理解  解决父类中静态
     */

    public function actionT3()
    {
//        B::echoClass();   // 预测输出 A
//        B::test();        // 预测输出 A
//        exit;

//        exit;
//        B::test();   // 输出 app\controller\A
//        B::test2();  // 输出 app\controller\B
//        exit('ok');

        $son = new Boy();
        $son->tellName();  // 输出 liu bo Father Class

        echo "<hr/>";

//        exit;

        $girl = new Girl(); // 输出 jane Girl Class
        $girl->tellName();

        echo "<hr/>";


        $mon = new Mother(); // 输出 jane Girl Class
        $mon->tellName();
    }

    public function actionT4()
    {
        # 静态变量只能使用静态访问方式 不能使用 $ins->?  方式访问
        # 静态方法不同， 在实例对象中，可以使用 $ins->method() 方式访问

//        $vip = new Vip();
        $yVip = new Yvip();
        $yVip->setLevel(3);
        $yVip->score = 100;
        dd($yVip->getLevel());
        dd($yVip->score);

        $yVip2 = new Yvip();
        $yVip2->setLevel(4);
        $yVip2->score = 200;
        dd($yVip2->getLevel());
        dd($yVip2->score);

        Yvip::$level = 5;

        dd($yVip->getLevel());
        dd($yVip2->getLevel());
//        Yvip::$level=4;
//        dd($yVip->age);
//        $level = $yVip->getLevel();
        //dd($yVip->sex);  // 错误的访问方式
//        Yvip::$sex = Yvip::SEX_FEMALE;
//        dd(Yvip::$sex);
//        dd($yVip->getSex());
//        dd(Vip::$age);
//        dd($yVip);
//        dd($yVip->getName());
        dd($yVip);
        dd($yVip->calcDiscount());
    }


    public function actionT5()
    {
        $mysql = MysqlConnection::getInstance();
        $mysql2 = MysqlConnection::getInstance();

        $pdo = PdoConnection::getInstance();
        $pdo2 = PdoConnection::getInstance();

        dd($mysql);
        dd($mysql2);
        dd($mysql2->getClassName());

        dd($pdo);
        dd($pdo2);
        dd($pdo2->getClassName());
    }

    public function actionT6()
    {
        dd($_POST);
        dd($_FILES);
    }


    /**
     *
     *
     * abstract class base {
    //do sth
    }
            class aClass extends base{
            public static function create(){
            return new aClass();
            }
            }
            class bClass extends base{
            public static function create(){
            return new bClass();
            }
            }
            var_dump(aClass::create());
            var_dump(bClass::create());
     *
     * object(aClass)#1 (0) { } object(bClass)#1 (0) { }
     *
     *
     * abstract class base {
        public static function create(){
        return new self();
        }
        }
        class aClass extends base{
        }
        class bClass extends base{
        }
        var_dump(aClass::create());
        var_dump(bClass::create());
     *
     *
     * abstract class base {
        public static function create(){
        return new static();
        }
        }
        class aClass extends base{
        }
        class bClass extends base{
        }
        var_dump(aClass::create());
        var_dump(bClass::create());
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     */

}


